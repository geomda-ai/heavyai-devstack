

services:
  heavydb:
    container_name: {{HEAVYDB_SERVICE_NAME}}
    image: {{CONTAINER}}
    restart: unless-stopped
    ipc: shareable
    volumes:
    - /var/lib/heavyai:/var/lib/heavyai
    networks:
    - heavy-network
    ports:
    - "{{HEAVYDB_PORT}}:{{HEAVYDB_PORT}}"
    - "{{HEAVYDB_BACKEND_PORT}}:{{HEAVYDB_BACKEND_PORT}}"
    - "{{IMMERSE_PORT}}:{{IMMERSE_PORT}}"
    - "{{HEAVYIQ_PORT}}:{{HEAVYIQ_PORT}}"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  nginx:
    image: nginx:latest
    container_name: webserver
    restart: unless-stopped

    ports:
      - $EXTERNAL_PORT:80

    networks:
      - heavy-network

    volumes:
      - ./heavyai-devstack/templates/jupyterConfig/nginx.conf:/etc/nginx/nginx.conf
      - /var/lib/heavyai/jupyter/nginx/log:/var/log/nginx/

  hub:
    build:
      context: .
      dockerfile: ./heavyai-devstack/templates/jupyterConfig/Dockerfile.jupyterhub
      args:
        JUPYTERHUB_VERSION: latest

    restart: unless-stopped
    image: jupyterhub
    container_name: jupyterhub 

    networks:
      - heavy-network

    volumes:
      - "./heavyai-devstack/templates/jupyterConfig/jupyterhub_config.py:/srv/jupyterhub/jupyterhub_config.py:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
      - "jupyterhub-data:/data"

    ports:
      - 8000:8000

    environment:
      # This username will be a JupyterHub admin
      JUPYTERHUB_ADMIN: admin
      # All containers will join this network
      DOCKER_NETWORK_NAME: heavy-network
      # JupyterHub will spawn this Notebook image for users
      DOCKER_NOTEBOOK_IMAGE: jupyter/base-notebook:latest
      # Notebook directory inside user image
      DOCKER_NOTEBOOK_DIR: /home/jovyan/work
      # Using this run command
      DOCKER_SPAWN_CMD: start-singleuser.sh

volumes:
  jupyterhub-data:

networks:
  heavy-network:
    name: heavy-network

